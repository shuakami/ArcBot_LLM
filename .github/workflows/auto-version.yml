name: Bump Version and Create Release

on:
  push:
    branches:
      - master

jobs:
  bump_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version tag
        id: get_version
        run: |
          git fetch --tags --force
          LATEST_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "Latest tag is: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Calculate next version
        id: calc_version
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          VERSION_CORE=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_CORE"
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "Calculated new tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      - name: Create and push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "Created and pushed tag $NEW_TAG"

      - name: Generate Release Notes and Save to File
        id: generate_release_notes
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
          echo "Generating release notes between $LATEST_TAG and $NEW_TAG"
          
          COMMIT_LOG=""
          RAW_MARKDOWN_NOTES=""
          if [ "$LATEST_TAG" == "v0.0.0" ]; then
            COMMIT_LOG=$(git log --pretty=format:"* %s (%h) by @%an" HEAD)
            RAW_MARKDOWN_NOTES="## Release $NEW_TAG ðŸŽ‰\n\nThis is the first automated release!\n\n### Changes\n$COMMIT_LOG\n\nThanks to all contributors!"
          else
            COMMIT_LOG=$(git log --pretty=format:"* %s (%h) by @%an" $LATEST_TAG..HEAD)
            RAW_MARKDOWN_NOTES="## Release $NEW_TAG ðŸŽ‰\n\nThis release includes the following changes since $LATEST_TAG:\n\n### Changes\n$COMMIT_LOG\n\nThanks to all contributors!"
          fi
          
          echo "Saving markdown notes to release_notes.md"
          # Use printf to handle newlines correctly when writing to file
          printf "%s" "$RAW_MARKDOWN_NOTES" > release_notes.md
          echo "Contents of release_notes.md:"
          cat release_notes.md

      - name: Create GitHub Release using gh api
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_TAG: ${{ steps.calc_version.outputs.new_tag }}
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases \
            -f tag_name="$NEW_TAG" \
            -f name="Release $NEW_TAG" \
            -F body=@release_notes.md
          echo "GitHub Release created for tag $NEW_TAG"
