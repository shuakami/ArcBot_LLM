name: Bump Version and Create Release

on:
  push:
    branches:
      - master

jobs:
  bump_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history including tags

      - name: Get latest version tag
        id: get_version
        run: |
          # Fetch all tags to ensure we have the latest list
          git fetch --tags --force
          
          # Obtain the latest SemVer tag (vX.Y.Z). Default to v0.0.0 if none found
          LATEST_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "Latest tag is: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Calculate next version
        id: calc_version
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          VERSION_CORE=${LATEST_TAG#v}      # Strip the 'v' prefix
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_CORE"
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "Calculated new tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      - name: Create and push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
          # Configure git for the GitHub Actions bot
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "Created and pushed tag $NEW_TAG"

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
          
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # First automated release ‚Äì include complete history
            COMMIT_LOG=$(git log --pretty=format:"* %s (%h) by @%an" HEAD)
            RAW_MARKDOWN_NOTES="## Release $NEW_TAG üéâ\n\nThis is the first automated release!\n\n### Changes\n$COMMIT_LOG\n\nThanks to all contributors!"
          else
            COMMIT_LOG=$(git log --pretty=format:"* %s (%h) by @%an" "$LATEST_TAG"..HEAD)
            RAW_MARKDOWN_NOTES="## Release $NEW_TAG üéâ\n\nThis release includes the following changes since $LATEST_TAG:\n\n### Changes\n$COMMIT_LOG\n\nThanks to all contributors!"
          fi
          
          # Encode newlines for safe step outputs
          ENCODED_FOR_GITHUB_OUTPUT="${RAW_MARKDOWN_NOTES//'%'/'%25'}"
          ENCODED_FOR_GITHUB_OUTPUT="${ENCODED_FOR_GITHUB_OUTPUT//$'\n'/'%0A'}"
          ENCODED_FOR_GITHUB_OUTPUT="${ENCODED_FOR_GITHUB_OUTPUT//$'\r'/'%0D'}"
          echo "release_notes=$ENCODED_FOR_GITHUB_OUTPUT" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release via API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
          # GitHub automatically decodes the %0A back to real newlines when the output is read
          RAW_NOTES="${{ steps.generate_release_notes.outputs.release_notes }}"
          
          # Build JSON payload safely with jq to avoid manual escaping
          API_JSON_PAYLOAD=$(jq -n --arg tag_name "$NEW_TAG" \
                                   --arg name "Release $NEW_TAG" \
                                   --arg body "$RAW_NOTES" \
                                   '{ tag_name: $tag_name,
                                      name: $name,
                                      body: $body,
                                      draft: false,
                                      prerelease: false }')

          echo "Creating release $NEW_TAG via GitHub API"
          HTTP_STATUS=$(curl --silent --output /dev/null --write-out "%{http_code}" \
             --request POST \
             --url "https://api.github.com/repos/${{ github.repository }}/releases" \
             --header "Authorization: Bearer $GITHUB_TOKEN" \
             --header "Accept: application/vnd.github.v3+json" \
             --header "Content-Type: application/json" \
             --data "$API_JSON_PAYLOAD")

          echo "GitHub API response code: $HTTP_STATUS"
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            echo "‚úÖ GitHub Release for $NEW_TAG created/updated successfully."
          else
            echo "‚ùå Failed to create/update GitHub Release for $NEW_TAG. HTTP $HTTP_STATUS"
            exit 1
          fi
