name: Bump Version and Create Release

on:
  push:
    branches:
      - master

jobs:
  bump_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史记录，以便访问所有标签

      - name: Get latest version tag
        id: get_version
        run: |
          # 从远程获取所有标签，以防本地不是最新的
          git fetch --tags --force
          
          # 获取最新的符合 SemVer (vX.Y.Z) 格式的标签
          # 如果没有找到，默认为 v0.0.0，这样第一次运行时会生成 v0.0.1
          LATEST_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "Latest tag is: $LATEST_TAG"
          # 将 latest_tag 设置为后续步骤的输出变量
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Calculate next version
        id: calc_version
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          # 移除 'v' 前缀，例如 "v1.2.3" -> "1.2.3"
          VERSION_CORE=${LATEST_TAG#v}
          
          # 将版本号分割为 MAJOR, MINOR, PATCH
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_CORE"
          
          # 递增 PATCH 版本号
          NEW_PATCH=$((PATCH + 1))
          
          NEW_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "Calculated new tag: $NEW_TAG"
          # 将 new_tag 设置为后续步骤的输出变量
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"

      - name: Create and push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
          # 配置 git 用户信息，推送标签时可能需要
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "Created and pushed tag $NEW_TAG"

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
          
          echo "Generating release notes between $LATEST_TAG and $NEW_TAG"
          
          COMMIT_LOG=""
          RAW_MARKDOWN_NOTES=""
          if [ "$LATEST_TAG" == "v0.0.0" ]; then
            COMMIT_LOG=$(git log --pretty=format:"* %s (%h) by @%an" HEAD)
            RAW_MARKDOWN_NOTES="## Release $NEW_TAG 🎉\n\nThis is the first automated release!\n\n### Changes\n$COMMIT_LOG\n\nThanks to all contributors!"
          else
            COMMIT_LOG=$(git log --pretty=format:"* %s (%h) by @%an" $LATEST_TAG..HEAD)
            RAW_MARKDOWN_NOTES="## Release $NEW_TAG 🎉\n\nThis release includes the following changes since $LATEST_TAG:\n\n### Changes\n$COMMIT_LOG\n\nThanks to all contributors!"
          fi
          
          # For GITHUB_OUTPUT, encode newlines etc. so Actions can pass it to the next step correctly
          ENCODED_FOR_GITHUB_OUTPUT="${RAW_MARKDOWN_NOTES//'%'/'%25'}"
          ENCODED_FOR_GITHUB_OUTPUT="${ENCODED_FOR_GITHUB_OUTPUT//$'\n'/'%0A'}"
          ENCODED_FOR_GITHUB_OUTPUT="${ENCODED_FOR_GITHUB_OUTPUT//$'\r'/'%0D'}"
          echo "release_notes_for_step_output=$ENCODED_FOR_GITHUB_OUTPUT" >> "$GITHUB_OUTPUT"
          
          echo "Raw markdown notes generated:"
          echo "$RAW_MARKDOWN_NOTES"

      - name: Create GitHub Release via API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG="${{ steps.calc_version.outputs.new_tag }}"
          # This will be the raw markdown with actual newlines, as decoded by Actions from the previous step's output
          RAW_NOTES_FROM_PREVIOUS_STEP="${{ steps.generate_release_notes.outputs.release_notes_for_step_output }}"

          # Create a JSON-safe string for the 'body' field. jq -Rsa . wraps the input in quotes and escapes internal chars.
          # Then sed removes the outer quotes because we'll add them in the payload string.
          JSON_ESCAPED_NOTES_BODY=$(printf "%s" "$RAW_NOTES_FROM_PREVIOUS_STEP" | jq -Rsa . | sed 's/^"//;s/"$//')

          echo "Creating release $NEW_TAG via GitHub API"
          
          # Construct the JSON payload string
          # Note the careful quoting for the body
          API_JSON_PAYLOAD=$(printf '{ "tag_name": "%s", "name": "Release %s", "body": "%s", "draft": false, "prerelease": false }' \
            "$NEW_TAG" \
            "$NEW_TAG" \
            "$JSON_ESCAPED_NOTES_BODY")

          echo "DEBUG: API Payload being sent:"
          echo "$API_JSON_PAYLOAD"

          HTTP_RESPONSE_CODE=$(curl --silent --output /dev/stderr --write-out "%{http_code}" \
             --request POST \
             --url "https://api.github.com/repos/${{ github.repository }}/releases" \
             --header "Authorization: Bearer $GITHUB_TOKEN" \
             --header "Accept: application/vnd.github.v3+json" \
             --header "Content-Type: application/json" \
             --data "$API_JSON_PAYLOAD")

          echo "DEBUG: GitHub API HTTP Response Code: $HTTP_RESPONSE_CODE"

          if [ "$HTTP_RESPONSE_CODE" -ge 200 ] && [ "$HTTP_RESPONSE_CODE" -lt 300 ]; then
            echo "✅ GitHub Release for $NEW_TAG created/updated successfully via API (HTTP $HTTP_RESPONSE_CODE)."
          else
            echo "❌ Failed to create/update GitHub Release for $NEW_TAG via API (HTTP $HTTP_RESPONSE_CODE). Check previous error output from curl." >&2 # Send to stderr
            exit 1
          fi 